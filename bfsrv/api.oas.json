{
  "openapi": "3.1.0",
  "info": {
    "title": "Blobfish API",
    "version": "1.0.0",
    "summary": "Speech-to-text streaming transcription service",
    "contact": {
      "email": "support@blobfish.no",
      "name": "Blobfish Support"
    }
  },
  "servers": [
    {
      "url": "https://api.blobfish.no",
      "description": "Blobfish API Server"
    }
  ],
  "paths": {
    "/payment": {
      "patch": {
        "summary": "Top up user's balance by confirming completed payment",
        "description": "This method makes the backend check status of the payment and top up balance if it's completed.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reference": {
                    "description": "Payment reference returned by /payment POST.",
                    "type": "string",
                    "examples": [
                      "5JJ76501HR1068729"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a payment status. If it's \"completed\" then the payment is confirmed and the balance has been topped up.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Payment status.",
                      "type": "string",
                      "enum": [
                        "new",
                        "canceled",
                        "completed"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "User sent a malformed request.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "description": "Payment not found.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "description": "Server has failed to process request due to internal error.",
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a new payment",
        "description": "User creates a new payment by specifying the related details, then follows a URL that is returned to complete it.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "description": "Payment currency.",
                    "type": "string",
                    "examples": [
                      "USD"
                    ]
                  },
                  "amount": {
                    "description": "Payment amount.",
                    "type": "number",
                    "examples": [
                      12.34
                    ]
                  },
                  "processor": {
                    "description": "Payment processor (currently only Paypal is supported).",
                    "type": "string",
                    "enum": [
                      "paypal"
                    ]
                  },
                  "toUser": {
                    "description": "Receiving user UUID (the calling user if omitted).",
                    "type": "string",
                    "examples": [
                      "40d3699b-85b9-45fd-8d93-26f3832e7717"
                    ]
                  },
                  "locale": {
                    "description": "Payment page locale.",
                    "default": "en-US"
                  }
                },
                "required": [
                  "currency",
                  "amount",
                  "processor"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment is created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "description": "Payment ID registered at the specified processor.",
                      "type": "string",
                      "examples": [
                        "5JJ76501HR1068729"
                      ]
                    },
                    "url": {
                      "description": "URL to follow for payment completion.",
                      "type": "string",
                      "examples": [
                        "https://www.paypal.com/checkoutnow?token=5JJ76501HR1068729"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "url"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "User sent a malformed request.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "description": "User cannot be authorized or authenticated.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "404": {
            "description": "User not found.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "description": "Server has failed to process request due to internal error.",
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Create an access token",
        "description": "There are several kinds of access tokens created by this method:<ul><li>Regular token that enables transcribing.</li><li>Admin token that in addition to transcribing enables managing user account (e.g to issue regular access tokens or change email address).</li><li>Email confirmation token that is used for registering or changing email address.</li></ul>",
        "security": [
          {
            "BearerAuth": []
          },
          {}
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "expiresAt": {
                    "description": "Token expiration date and time (ISO-8601).",
                    "type": "string",
                    "default": "9999-12-31T00:00:00Z",
                    "examples": [
                      "2024-06-02T20:20:56Z"
                    ]
                  },
                  "label": {
                    "description": "Token label.",
                    "type": "string",
                    "examples": [
                      "Joe's token"
                    ]
                  },
                  "isAdmin": {
                    "description": "Is the token capable of changing account settings.",
                    "type": "boolean",
                    "default": false
                  },
                  "email": {
                    "description": "Email address to change for user or register with.",
                    "type": "string",
                    "examples": [
                      "john.smith@gmail.com"
                    ]
                  }
                },
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Token ID. Omitted if the token is for email address confirmation.",
                      "type": "string",
                      "examples": [
                        "c75e9dfe-e5cb-4e50-910d-2300435cc9c1"
                      ]
                    },
                    "token": {
                      "description": "Access token. Omitted if the token is for email address confirmation. In that case it's sent to that address.",
                      "type": "string",
                      "examples": [
                        "vtrerCHjSTymLl/0/plEApckP6dP/lISis3Ecid1Lj+tnMUpchSwD438rLeGvvUV"
                      ]
                    }
                  },
                  "required": []
                }
              }
            }
          },
          "401": {
            "description": "User sent a malformed request.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "description": "User cannot be authorized or authenticated.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "description": "Server has failed to process request due to internal error.",
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/transcribe": {
      "get": {
        "summary": "Transcribe audio stream through websocket (WSS URL scheme)",
        "description": "User sends a binary audio stream (currently supported Ogg Vorbis only) and receives text messages that contain JSON-encoded segments.<br><br>Examples:<ul><li><code>sox -d -t vorbis -q - | websocat -b &quot;wss://api.blobfish.no/transcribe?tariff=basic&amp;lang=en&quot; -H &quot;Content-Type: audio/ogg; codecs=vorbis&quot; -H &quot;Authorization: Bearer $ACCESS_TOKEN&quot;</code><br><br></li><li><code>{ cat recording.ogg; printf &quot;I&#39;ll be back&quot; } | websocat -b &quot;wss://api.blobfish.no/transcribe?tariff=basic&amp;lang=en&quot; -H &quot;Content-Type: audio/ogg; codecs=vorbis&quot; -H &quot;X-Blobfish-Terminator: I&#39;ll be back&quot; -H &quot;Authorization: Bearer $ACCESS_TOKEN&quot; --no-close</code></li></ul>",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Request content type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "audio/ogg; codecs=vorbis"
              ]
            }
          },
          {
            "name": "X-Blobfish-Terminator",
            "in": "header",
            "description": "A boundary that designates end of audio stream.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariff",
            "in": "query",
            "description": "Transcription tariff.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "basic"
              ]
            }
          },
          {
            "name": "lang",
            "in": "query",
            "description": "Speech language.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "af",
                "am",
                "ar",
                "as",
                "az",
                "ba",
                "be",
                "bg",
                "bn",
                "bo",
                "br",
                "bs",
                "ca",
                "cs",
                "cy",
                "da",
                "de",
                "el",
                "en",
                "es",
                "et",
                "eu",
                "fa",
                "fi",
                "fo",
                "fr",
                "gl",
                "gu",
                "ha",
                "haw",
                "he",
                "hi",
                "hr",
                "ht",
                "hu",
                "hy",
                "id",
                "is",
                "it",
                "ja",
                "jw",
                "ka",
                "kk",
                "km",
                "kn",
                "ko",
                "la",
                "lb",
                "ln",
                "lo",
                "lt",
                "lv",
                "mg",
                "mi",
                "mk",
                "ml",
                "mn",
                "mr",
                "ms",
                "mt",
                "my",
                "ne",
                "nl",
                "nn",
                "no",
                "oc",
                "pa",
                "pl",
                "ps",
                "pt",
                "ro",
                "ru",
                "sa",
                "sd",
                "si",
                "sk",
                "sl",
                "sn",
                "so",
                "sq",
                "sr",
                "su",
                "sv",
                "sw",
                "ta",
                "te",
                "tg",
                "th",
                "tk",
                "tl",
                "tr",
                "tt",
                "uk",
                "ur",
                "uz",
                "vi",
                "yi",
                "yo",
                "zh",
                "yue"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection is upgraded to websocket.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "begin": {
                      "type": "number",
                      "description": "Start time of the segment, in seconds.",
                      "examples": [
                        12.345
                      ]
                    },
                    "end": {
                      "type": "number",
                      "description": "End time of the segment, in seconds.",
                      "examples": [
                        23.456
                      ]
                    },
                    "text": {
                      "type": "string",
                      "description": "Segment transcription.",
                      "examples": [
                        "To be or not to be, that is the question..."
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User sent a malformed request.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "402": {
            "description": "User does not have enough balance.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "description": "User cannot be authorized or authenticated.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "description": "Server has failed to process request due to internal error.",
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get user information",
        "description": "Typically this endpoint is used to check own balance.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User information is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "User information.",
                      "properties": {
                        "id": {
                          "description": "User ID.",
                          "type": "string",
                          "examples": [
                            "c75e9dfe-e5cb-4e50-910d-2300435cc9c1"
                          ]
                        },
                        "createdAt": {
                          "description": "User creation date and time (ISO-8601).",
                          "type": "string",
                          "examples": [
                            "2024-06-02T20:20:56Z"
                          ]
                        },
                        "email": {
                          "description": "User email address.",
                          "type": "string",
                          "examples": [
                            "john.smith@gmail.com"
                          ]
                        },
                        "referrer": {
                          "description": "ID of referrer who created email confirmation token used to register this user.",
                          "type": "string",
                          "examples": [
                            "c75e9dfe-e5cb-4e50-910d-2300435cc9c1"
                          ]
                        },
                        "campaign": {
                          "description": "User promotional campaign.",
                          "type": "string",
                          "examples": [
                            "c75e9dfe-e5cb-4e50-910d-2300435cc9c1"
                          ]
                        },
                        "balance": {
                          "description": "User balance (in USD).",
                          "type": "string",
                          "examples": [
                            "1.23"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "createdAt",
                        "email",
                        "campaign",
                        "balance"
                      ]
                    }
                  },
                  "required": [
                    "user"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "User cannot be authorized or authenticated.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "description": "Server has failed to process request due to internal error.",
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Register a new user",
        "description": "To register, you must first generate an email confirmation token by calling the `/token` endpoint with a POST request. Using this token, you can create a new user. Optionally, you can associate the new user with a promotional campaign by including a `promoCode` in the request payload. Along with the user, a never-expiring administrative token is created.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "promoCode": {
                    "description": "Code of promotional campaign.",
                    "type": "string",
                    "default": "default",
                    "examples": [
                      "secret"
                    ]
                  }
                },
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User is registered.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "User ID.",
                      "type": "string",
                      "examples": [
                        "c75e9dfe-e5cb-4e50-910d-2300435cc9c1"
                      ]
                    },
                    "tokenId": {
                      "description": "ID of administrative access token.",
                      "type": "string",
                      "examples": [
                        "c75e9dfe-e5cb-4e50-910d-2300435cc9c1"
                      ]
                    },
                    "token": {
                      "description": "Administrative access token.",
                      "type": "string",
                      "examples": [
                        "vtrerCHjSTymLl/0/plEApckP6dP/lISis3Ecid1Lj+tnMUpchSwD438rLeGvvUV"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "tokenId",
                    "token"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "User sent a malformed request.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "403": {
            "description": "Email cannot be confirmed.",
            "$ref": "#/components/responses/ErrorResponse"
          },
          "500": {
            "description": "Server has failed to process request due to internal error.",
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Access token."
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "Error occurred.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "description": "Error details.",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Error kind.",
                      "examples": [
                        "user_not_found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "examples": [
                        "user not found"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
